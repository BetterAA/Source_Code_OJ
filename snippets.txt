1.  交换变量的值
	t=a; a=b; b=t; 

	a=b-a; b=b-a ; a=b+a

	指针地址操作，可以对任意类型
	*a=new int(10); 
	*b=new int(20); //&a=0x00001000h,&b=0x00001200h 
	if(a<b) { 
	a=(int*)(b-a); 
	b=(int*)(b-(int(a)&0x0000ffff)); 
	a=(int*)(b+(int(a)&0x0000ffff)); 
	} 
	else { 
	b=(int*)(a-b); 
	a=(int*)(a-(int(b)&0x0000ffff)); 
	b=(int*)(a+(int(b)&0x0000ffff)); 
	} 

	位运算 a=a^b;b=a^b;a=a^b

2.  判断一个树是不是整数， fmod（x，1）＝＝0或者
	double x ； x－（int）x ＝＝0

3.  python文件读写
	# -*- coding: utf-8 -*-
	from numpy import *

	def dataSplit(filename):
		dataset = open(filename).readlines()
		totnum = shape(dataset)[0]
		print totnum
		tmpFIle = []
		for i in range(100):
			tmpFIle.append(dataset[i])

		outFile = open('/Users/AA/Desktop/testfile','w')	
		outFile.writelines(tmpFIle)
		outFile.close()
	##################################
	dataMat = [] ; labelMat = []
    fr = open(filename)
    for line in fr.readlines():
        
        lineArr = []
        currLine = line.strip().split(',')
        #print len(currLine),numFeat;raw_input()
        for i in range(numFeat):
4. 	python list连接 
	"/ ".join(seg_list) 

5.  vector的遍历 vector的大小（size（））,取vector的末尾元素
	vector<int>::iterator ite = nums.begin();
     while(ite!=nums.end()){
     	if(*ite==val){  nums.push_back(0); }
     	ite++;
     }
     ============================
     直接写成!!!!!!!!!!!!!!!!!!!!
     for(auto i : vector)

6. c++中的关于map（key－value）的hash实现方法： unordered_map
	#include<unordered_map>
	#include<unordered_set>
	unordered_map<char,int> count;
	for(int i=0 ; i<len; i++){
		//key － value
		count[s[i]]++;
		count[t[i]]--;
	}
	for(auto cnt : count)
	//cnt.second即键值中的value
		if(cnt.second) return false;

	months["september"] 

	向其中添加pair
	unordered_map<int,bool> disdict;
     for(auto num:nums){
     	if(disdict.find(num)!=disdict.end()){ //only find the key
     		return true;
     	}
     	disdict.insert(make_pair(num, true));//add the pair
     }

7. python 列表连接 
	binfo = ['lao','wang','python']

	我们通过help方法得知，可以用string的join方法来解决。
	下面我们通过空格来连接3个单词：
	content = " ".join(binfo)
	print content
8.  python格式转换
	int（xx），str（xx）， float（xx）
9.  序列化列表  解决expected string or Unicode, float found
	fw.write('%s\n' % ','.join([str(v) for v in c]))
	tmp.append("%s\t%f"%(tag[0],tag[1]))
10.  python nicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128) 编码问题
	http://wangye.org/blog/archives/629/
	函数里 reload（sys）
	sys.setdefaultencoding('utf-8')
11.  单链表操作的盲区 //盲区：！！  tail= head;意味着两个是一个东西，所以如果改变tail相当于改变head！！
	//就像newHead = head->next;	 newHead->next = tail;这句，其实也就是改了head－》next－》next！！
	//重点在下边这句
	//所以链表操作应该写成 a＝b；b＝c；c＝d这种的！！

12. python追加文件写入
	fr ＝ open（‘a。txt’，‘a＋’） ／／如果没有的话就创建，有的话就追加

13. c++  取整数每位digit  divident ＝ n％10； n＝ n／10
14. c++	 如果是1返回true，不是返回false的简洁写法：
	return res＝＝1；
15.  c++ 十进制数中二进制的1的个数， n ＝ n&（n－1） ／／每次总是能干掉从右到左的第一个1
16. c++ 绝对值abs（a）
17  c++ vector用法 v.pop_back()    删除容器的末元素，并不返回该元素。
	v.clear()      删除容器中的所有元素
	vector.begin() .end() 返回迭代器
	vector.front() .back()
	排序sort(vec.begin(),vec.end());
	bool Comp(const int &a,const int &b)
	{
	    return a>b;
	}
	调用时:sort(vec.begin(),vec.end(),Comp)，这样就降序排序。
	反转reverse(vec.begin(),vec.end())

18.  c++ 输出string流
		ostringstream s;
        s << bull << "A" << cows << "B"; ／／bull是int
        return s.str();
     或者
     	return to_string（inta）＋“a”；

     输入string流
     istringstream stream(line);   ／／ line是包含空格的输入流，用stream可以按照空格分开后输入到str中
        while(stream>>str)  
            cout<<str.c_str()<<endl;  

19.   	c++ &引用
		string foo( );
		void bar(string & s);

		　　那么下面的表达式将是非法的：

		bar(foo( ));
		bar("hello world");

		　　原因在于foo( )和"hello world"串都会产生一个临时对象，而在C++中，这些临时对象都是const类型的。因此上面的表达式就是试图将一个const类型的对象转换为非const类型，这是非法的。

20.	   c++ 反转单链表 经典做法
		 ListNode* reverseList(ListNode* head){
        if(!head) return NULL;
        listNode* pre=NULL,next=NULL;   
        //next: next node this pass
        //pre: now node this pass,  head is reversedNode
        while(head){
            next = head->next;
            head->next = pre;
            pre = head;
            head = next; //head backward anyway
        }
        return pre;
    }	
21.		c++ 判断overflow underflow
		if(res > INT_MAX/10) return 0; //can cause overflow
         res *= 10;
         if(res > (INT_MAX-(tmp))) return 0; //can cause overflow
         res += tmp;
22.     c++  prime
		求《n 的素数的个数， 由很多优化点
		int countPrimes(int n) {
        //优化点： 1. 倍树筛素数， 2. 基底不需要到n， 到 根号n就行了，  3.倍树删除的时候，j＝i＊i起步，而不是 j ＝ i＊2起步，因为2的时候已经删过了，这也是为什么2中要根号n,  4. 避免使用sqrt函数，expensive，用for(i=2; i＊i< n; i++)替换
        bool isPrime[n] ;
        for(int i=2 ; i<n; i++) isPrime[i] = true;
        
        for(int i=2; i*i<n ;i++){
            if(!isPrime[i]) continue;
            
            for(int j = i*i ; j<n ;j+=i)
                isPrime[j] = false;
        }
        int count = 0;
        for(int i=2 ;i<n ;i++){
            if(isPrime[i])
                count++;
        }
    	    return count;   
    }
23. 　　c++ 二分查询
		int left = 1, right = n;

		注意点：while里面没有＝ ； left ＝middle＋1而right ＝ middle， 没有加一，只有一边有
        while(left<right){
        //注意：如果写成（left＋right）／2的话可能会导致上溢出变负数，这样的话就TLE饿。。
            int middle = left + (right - left) / 2 ; 
           
            if(!isBadVersion(middle)) left = middle+1;
            else  right = middle;
        }


24.	   xor 异或 
	   0 ^ a ＝ a
	   a ^ a ＝ 0
	   a ^ b 并不是等于0或者1， 他是按照位处理的

25.   位操作： 获取a的二进制中最右的1， 例如a ＝ 110，  获得10
		int splitTag = xorValue&-xorValue; 

26.   trick 1～N里面平方数的个数就是（int）sqrt（n）